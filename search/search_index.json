{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#renesas-rz-linux-bsp-plus","title":"Renesas RZ Linux BSP Plus","text":"<p>Renesas RZ Linux BSP Plus</p> <p>A S/W package with latest LTS Kernel and Yocto support running on Renesas EVK.</p> <p></p> <ul> <li> <p>Linux BSP Plus is a software package with latest Linux LTS kernel and Yocto support running on EVK.     This software package of each product has a minimal configuration. </p> </li> <li> <p>Linux BSP Plus target users are Linux expert skilled engineers.     (Need Linux-based development experience and can use OSS while solving issues by themselves)</p> </li> <li> <p>Linux BSP and middleware specialized for each RZ MPU series target applications are supported.</p> </li> </ul> <p></p>"},{"location":"#whats-new","title":"What's new","text":"<p>2025/09/30</p> <p>RZ Linux BSP Plus for Kernel 6.12 v2.0 is available.</p> <p>Target Device : RZ/G2L, RZ/G2LC, RZ/G2UL, RZ/G3S</p> <p>* RZ/G2LC, RZ/G2UL and RZ/G3S are newly supported in this update.</p> <ul> <li>Kernel 6.12</li> <li>Yocto 5.0 (Scarthgap)</li> </ul> <p>View News &amp; Updates &gt;</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Getting Started is a complete guide to learn how to run Renesas RZ Linux BSP Plus, which explains the procedure for setting up the development environment, compiling the Renesas RZ Linux BSP Plus, setting up the board and running the Renesas RZ Linux BSP Plus.</p> <p>Get your target board now and GET STARTED.</p>"},{"location":"appendix/","title":"Appendix","text":""},{"location":"appendix/#appendix","title":"Appendix","text":""},{"location":"appendix/#how-to-boot-from-emmc","title":"How to boot from eMMC","text":"<p>In this section, the steps to boot from eMMC are described.</p>"},{"location":"appendix/#writing-bootloader-for-emmc-boot","title":"Writing Bootloader for eMMC Boot","text":"<p>For the boot operation, <code>EXT_CSD</code> registers of eMMC need to be modified and two boot loader files need to be written to the target board.</p> <p>After booting the <code>Flash Writer</code>, <code>EM_SECSD</code> command of Flash Writer is used to modify <code>EXT_CSD</code> register of eMMC to enable eMMC boot.</p> <p>Then, <code>EM_W</code> command of Flash Writer is used to write boot loader binary files. This command receives binary data from the serial port and writes the data to a specified address of the eMMC with information where the data should be loaded on the address of the main memory.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Then, set the SW1 on SOM module to eMMC mode.</p> <p></p> SW1-1 SW1-2 ON OFF <p>For example, this part describes how to modify <code>EXT_CSD</code> register and write boot loader files:</p> <pre><code>&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b1\n  EXT_CSD[B1] = 0x00\n  Please Input Value(H'00 - H'FF) :2\n  EXT_CSD[B1] = 0x02\n&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b3\n  EXT_CSD[B3] = 0x00\n  Please Input Value(H'00 - H'FF) :8\n  EXT_CSD[B3] = 0x08\n</code></pre> <pre><code>&gt;EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :1\nPlease Input Program Start Address : 11e00\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_mmc-smarc-rzg2l_pmic.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>Next, write another loader file by using <code>EM_W</code> command again.</p> <pre><code>&gt; EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :100\nPlease Input Program Start Address : 0\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg2l_pmic.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>After writing two loader files normally, turn off the power of the board by changing the SW11.</p> <p>Note</p> <ul> <li> <p>Address of <code>EXT_CSD</code> register of eMMC for eMMC boot</p> Address Value to write <code>0xB1</code> <code>0x02</code> <code>0xB3</code> <code>0x08</code> </li> <li> <p>Address for sending each loader binary file for eMMC boot</p> File name Partition to save to eMMC Address to save to eMMC Address to load to RAM <code>bl2_bp_mmc-smarc-rzg2l_pmic.srec</code> <code>1</code> <code>00000001</code> <code>11E00</code> <code>fip-smarc-rzg2l_pmic.srec</code> <code>1</code> <code>00000100</code> <code>00000</code> </li> </ul> <p>Then, set the SW1 on SOM module to eMMC mode.</p> <p></p> SW1-1 SW1-2 SW1-3 SW1-4 SW1-5 SW1-6 ON OFF ON OFF ON ON <p>For example, this part describes how to modify <code>EXT_CSD</code> register and write boot loader files:</p> <pre><code>&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b1\n  EXT_CSD[B1] = 0x02\n  Please Input Value(H'00 - H'FF) :2\n  EXT_CSD[B1] = 0x02\n&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b3\n  EXT_CSD[B3] = 0x08\n  Please Input Value(H'00 - H'FF) :8\n  EXT_CSD[B3] = 0x08\n</code></pre> <pre><code>&gt;EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :1\nPlease Input Program Start Address : 11e00\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_mmc-smarc-rzg2lc.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>Next, write another loader file by using <code>EM_W</code> command again.</p> <pre><code>&gt; EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :100\nPlease Input Program Start Address : 0\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg2lc.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>After writing two loader files normally, turn off the power of the board by changing the SW11.</p> <p>Note</p> <ul> <li> <p>Address of <code>EXT_CSD</code> register of eMMC for eMMC boot</p> Address Value to write <code>0xB1</code> <code>0x02</code> <code>0xB3</code> <code>0x08</code> </li> <li> <p>Address for sending each loader binary file for eMMC boot</p> File name Partition to save to eMMC Address to save to eMMC Address to load to RAM <code>bl2_bp_mmc-smarc-rzg2lc.srec</code> <code>1</code> <code>00000001</code> <code>11E00</code> <code>fip-smarc-rzg2lc.srec</code> <code>1</code> <code>00000100</code> <code>00000</code> </li> </ul> <p>Then, set the SW1 on SOM module to eMMC mode.</p> <p></p> SW1-1 SW1-2 SW1-3 ON OFF ON <p>For example, this part describes how to modify <code>EXT_CSD</code> register and write boot loader files:</p> <pre><code>&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b1\n  EXT_CSD[B1] = 0x00\n  Please Input Value(H'00 - H'FF) :2\n  EXT_CSD[B1] = 0x02\n&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b3\n  EXT_CSD[B3] = 0x00\n  Please Input Value(H'00 - H'FF) :8\n  EXT_CSD[B3] = 0x08\n</code></pre> <pre><code>&gt;EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :1\nPlease Input Program Start Address : 11e00\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_mmc-smarc-rzg2ul.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>Next, write another loader file by using <code>EM_W</code> command again.</p> <pre><code>&gt; EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :100\nPlease Input Program Start Address : 0\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg2ul.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>After writing two loader files normally, turn off the power of the board by changing the SW11.</p> <p>Note</p> <ul> <li> <p>Address of <code>EXT_CSD</code> register of eMMC for eMMC boot</p> Address Value to write <code>0xB1</code> <code>0x02</code> <code>0xB3</code> <code>0x08</code> </li> <li> <p>Address for sending each loader binary file for eMMC boot</p> File name Partition to save to eMMC Address to save to eMMC Address to load to RAM <code>bl2_bp_mmc-smarc-rzg2ul.srec</code> <code>1</code> <code>00000001</code> <code>11E00</code> <code>fip-smarc-rzg2ul.srec</code> <code>1</code> <code>00000100</code> <code>00000</code> </li> </ul> <p>Then, set the SW_CONFIG on SOM module to eMMC mode.</p> <p></p> SW_CONFIG[1] SW_CONFIG[2] SW_CONFIG[3] SW_CONFIG[4] SW_CONFIG[5] SW_CONFIG[6] OFF OFF ON OFF OFF OFF <p>For example, this part describes how to modify <code>EXT_CSD</code> register and write boot loader files:</p> <pre><code>&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b1\n  EXT_CSD[B1] = 0x00\n  Please Input Value(H'00 - H'FF) :2\n  EXT_CSD[B1] = 0x02\n&gt;EM_SECSD\n  Please Input EXT_CSD Index(H'00 - H'1FF) :b3\n  EXT_CSD[B3] = 0x00\n  Please Input Value(H'00 - H'FF) :8\n  EXT_CSD[B3] = 0x08\n</code></pre> <pre><code>&gt;EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :1\nPlease Input Program Start Address : a1e00\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_mmc-smarc-rzg3s.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>Next, write another loader file by using <code>EM_W</code> command again.</p> <pre><code>&gt; EM_W\nEM_W Start --------------\n---------------------------------------------------------\nPlease select,eMMC Partition Area.\n 0:User Partition Area   : 62160896 KBytes\n  eMMC Sector Cnt : H'0 - H'0768FFFF\n 1:Boot Partition 1      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n 2:Boot Partition 2      : 32256 KBytes\n  eMMC Sector Cnt : H'0 - H'0000FBFF\n---------------------------------------------------------\n  Select area(0-2)&gt;1\n-- Boot Partition 1 Program -----------------------------\nPlease Input Start Address in sector :300\nPlease Input Program Start Address : 0\nWork RAM(H'50000000-H'50FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg3s.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SAVE -FLASH.......\nEM_W Complete!\n</code></pre> <p>After writing two loader files normally, turn off the power of the board by changing the SW_MODE.</p> <p>Note</p> <ul> <li> <p>Address of <code>EXT_CSD</code> register of eMMC for eMMC boot</p> Address Value to write <code>0xB1</code> <code>0x02</code> <code>0xB3</code> <code>0x08</code> </li> <li> <p>Address for sending each loader binary file for eMMC boot</p> File name Partition to save to eMMC Address to save to eMMC Address to load to RAM <code>bl2_bp_mmc-smarc-rzg3s.srec</code> <code>1</code> <code>00000001</code> <code>A1E00</code> <code>fip-smarc-rzg3s.srec</code> <code>1</code> <code>00000300</code> <code>00000</code> </li> </ul>"},{"location":"appendix/#create-a-microsd-card-to-boot-linux-for-emmc-boot","title":"Create a microSD card to boot Linux for eMMC boot","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Please create a microSD card (see Step 4: Deploy Renesas RZ Linux BSP Plus).</p> <p>After that, please return to the following instructions before unmounting the micro SD card.</p> <p>Copy the kernel image, device tree file, and rootfs to the second partition of the microSD card.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p></p><pre><code>cd /media/user/rootfs/root/\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2l/Image-smarc-rzg2l.bin ./\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2l/r9a07g044l2-smarc.dtb ./\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2l/&lt;image name&gt;-smarc-rzg2l.rootfs.tar.bz2 ./\ncd ${WORK}\nsudo umount /media/user/rootfs\n</code></pre><p></p> <p>Please create a microSD card (see Step 4: Deploy Renesas RZ Linux BSP Plus).</p> <p>After that, please return to the following instructions before unmounting the micro SD card.</p> <p>Copy the kernel image, device tree file, and rootfs to the second partition of the microSD card.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p></p><pre><code>cd /media/user/rootfs/root/\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2lc/Image-smarc-rzg2lc.bin ./\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2lc/r9a07g044c2-smarc.dtb ./\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2lc/&lt;image name&gt;-smarc-rzg2lc.rootfs.tar.bz2 ./\ncd ${WORK}\nsudo umount /media/user/rootfs\n</code></pre><p></p> <p>Please create a microSD card (see Step 4: Deploy Renesas RZ Linux BSP Plus).</p> <p>After that, please return to the following instructions before unmounting the micro SD card.</p> <p>Copy the kernel image, device tree file, and rootfs to the second partition of the microSD card.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p></p><pre><code>cd /media/user/rootfs/root/\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2ul/Image-smarc-rzg2ul.bin ./\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2ul/r9a07g043u11-smarc.dtb ./\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg2ul/&lt;image name&gt;-smarc-rzg2ul.rootfs.tar.bz2 ./\ncd ${WORK}\nsudo umount /media/user/rootfs\n</code></pre><p></p> <p>Please create a microSD card (see Step 4: Deploy Renesas RZ Linux BSP Plus).</p> <p>After that, please return to the following instructions before unmounting the micro SD card.</p> <p>Copy the kernel image, device tree file, and rootfs to the second partition of the microSD card.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p></p><pre><code>cd /media/user/rootfs/root/\nsudo cp ${WORK}/build/tmp/deploy/images/smarc-rzg3s/&lt;image name&gt;-smarc-rzg3s.rootfs.tar.bz2 ./\ncd ${WORK}\nsudo umount /media/user/rootfs\n</code></pre><p></p>"},{"location":"appendix/#writing-rootfs-to-emmc","title":"Writing rootfs to eMMC","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>To set the board to eMMC Boot mode, set the SW11 as below:</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON OFF OFF ON <p>Turn on the board by pressing the reset button. After Linux boots, please log in as root and create partitions on the eMMC by running the following commands.</p> <pre><code>root@smarc-rzg2l:~# fdisk /dev/mmcblk0\n\nWelcome to fdisk (util-linux 2.35.1).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nCommand (m for help): o\nCreated a new DOS disklabel with disk identifier 0xf3d53104.\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 1\nFirst sector (16-124321791, default 16): 16\nLast sector or +size{,K,M,G,T} (16-124321791, default 124321791): +500M\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 2\nFirst sector (1024016-124321791, default 1024016): 1024016\nLast sector or +size{,K,M,G,T} (1024016-124321791, default 124321791): 124321791\n\nCommand (m for help): p\nDisk /dev/mmcblk0: 59 GB, 63652757504 bytes, 124321792 sectors\n1942528 cylinders, 4 heads, 16 sectors/track\nUnits: sectors of 1 * 512 = 512 bytes\n\nDevice       Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type\n/dev/mmcblk0p1    0,1,1       1023,3,16           16    1024015    1024000  500M 83 Linux\n/dev/mmcblk0p2    1023,3,16   1023,3,16      1024016  124321791  123297776 58.7G 83 Linux\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\n\nroot@smarc-rzg2l:~#\n</code></pre> <p>Format eMMC.</p> <p></p><pre><code>mkfs.ext4 /dev/mmcblk0p1\nmkfs.ext4 /dev/mmcblk0p2\n</code></pre><p></p> <p>Format the eMMC and write the kernel, device tree, and rootfs.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p></p><pre><code>mount /dev/mmcblk0p1 /mnt/\ncp Image-smarc-rzg2l.bin /mnt/\ncp r9a07g044l2-smarc.dtb /mnt/\numount /dev/mmcblk0p1\nmount /dev/mmcblk0p2 /mnt/\ntar xf /root/&lt;image name&gt;-smarc-rzg2l.rootfs.tar.bz2 -C /mnt/\numount /dev/mmcblk0p2\n</code></pre><p></p> <p>To set the board to eMMC Boot mode, set the SW11 as below:</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON OFF OFF ON <p>Turn on the board by pressing the reset button. After Linux boots, please log in as root and create partitions on the eMMC by running the following commands.</p> <pre><code>root@smarc-rzg2lc:~# fdisk /dev/mmcblk0\n\nWelcome to fdisk (util-linux 2.35.1).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nCommand (m for help): o\nCreated a new DOS disklabel with disk identifier 0xf3d53104.\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 1\nFFirst sector (32-124321791, default 32): 32\nLast sector or +size{,K,M,G,T} (32-124321791, default 124321791): +500M\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 2\nFirst sector (1024032-124321791, default 1024032): 1024032\nLast sector or +size{,K,M,G,T} (1024032-124321791, default 124321791): 124321791\n\nCommand (m for help): p\nDisk /dev/mmcblk0: 59 GB, 63652757504 bytes, 124321792 sectors\n971264 cylinders, 4 heads, 32 sectors/track\nUnits: sectors of 1 * 512 = 512 bytes\n\nDevice       Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type\n/dev/mmcblk0p1    0,1,1       1023,3,32           32    1024031    1024000  500M 83 Linux\n/dev/mmcblk0p2    1023,3,32   1023,3,32      1024032  124321791  123297760 58.7G 83 Linux\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\n\nroot@smarc-rzg2lc:~#\n</code></pre> <p>Format eMMC.</p> <p></p><pre><code>mkfs.ext4 /dev/mmcblk0p1\nmkfs.ext4 /dev/mmcblk0p2\n</code></pre><p></p> <p>Format the eMMC and write the kernel, device tree, and rootfs.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p></p><pre><code>mount /dev/mmcblk0p1 /mnt/\ncp Image-smarc-rzg2lc.bin /mnt/\ncp r9a07g044c2-smarc.dtb /mnt/\numount /dev/mmcblk0p1\nmount /dev/mmcblk0p2 /mnt/\ntar xf /root/&lt;image name&gt;-smarc-rzg2lc.rootfs.tar.bz2 -C /mnt/\numount /dev/mmcblk0p2\n</code></pre><p></p> <p>To set the board to eMMC Boot mode, set the SW11 as below:</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON OFF OFF ON <p>Turn on the board by pressing the reset button. After Linux boots, please log in as root and create partitions on the eMMC by running the following commands.</p> <pre><code>root@smarc-rzg2ul:~# fdisk /dev/mmcblk0\n\nWelcome to fdisk (util-linux 2.35.1).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nCommand (m for help): o\nCreated a new DOS disklabel with disk identifier 0xf3d53104.\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 1\nFFirst sector (32-124321791, default 32): 32\nLast sector or +size{,K,M,G,T} (32-124321791, default 124321791): +500M\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 2\nFirst sector (1024032-124321791, default 1024032): 1024032\nLast sector or +size{,K,M,G,T} (1024032-124321791, default 124321791): 124321791\n\nCommand (m for help): p\nDisk /dev/mmcblk0: 59 GB, 63652757504 bytes, 124321792 sectors\n971264 cylinders, 4 heads, 32 sectors/track\nUnits: sectors of 1 * 512 = 512 bytes\n\nDevice       Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type\n/dev/mmcblk0p1    0,1,1       1023,3,32           32    1024031    1024000  500M 83 Linux\n/dev/mmcblk0p2    1023,3,32   1023,3,32      1024032  124321791  123297760 58.7G 83 Linux\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\n\nroot@smarc-rzg2ul:~#\n</code></pre> <p>Format eMMC.</p> <p></p><pre><code>mkfs.ext4 /dev/mmcblk0p1\nmkfs.ext4 /dev/mmcblk0p2\n</code></pre><p></p> <p>Format the eMMC and write the kernel, device tree, and rootfs.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p></p><pre><code>mount /dev/mmcblk0p1 /mnt/\ncp Image-smarc-rzg2ul.bin /mnt/\ncp r9a07g043u11-smarc.dtb /mnt/\numount /dev/mmcblk0p1\nmount /dev/mmcblk0p2 /mnt/\ntar xf /root/&lt;image name&gt;-smarc-rzg2ul.rootfs.tar.bz2 -C /mnt/\numount /dev/mmcblk0p2\n</code></pre><p></p> <p>To set the board to eMMC Boot mode, set the SW_MODE as below:</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] ON OFF OFF ON <p>Turn on the board by pressing the reset button. After Linux boots, please log in as root and create partitions on the eMMC by running the following commands.</p> <pre><code>root@smarc-rzg3s:~# fdisk /dev/mmcblk0\n\nWelcome to fdisk (util-linux 2.35.1).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nCommand (m for help): o\nCreated a new DOS disklabel with disk identifier 0xf3d53104.\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 1\nFirst sector (16-124321791, default 16): 16\nLast sector or +size{,K,M,G,T} (16-124321791, default 124321791): +500M\n\nCommand (m for help): n\nPartition type\n   p   primary partition (1-4)\n   e   extended\np\n\nPartition number (1-4): 2\nFirst sector (1024016-124321791, default 1024016):1024016\nLast sector or +size{,K,M,G,T} (1024016-124321791, default 124321791): 124321791\n\nCommand (m for help): p\nDisk /dev/mmcblk0: 59 GB, 63652757504 bytes, 124321792 sectors\n1942528 cylinders, 4 heads, 16 sectors/track\nUnits: sectors of 1 * 512 = 512 bytes\n\nDevice       Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type\n/dev/mmcblk0p1    0,1,1       1023,3,16           16    1024015    1024000  500M 83 Linux\n/dev/mmcblk0p2    1023,3,16   1023,3,16      1024016  124321791  123297776 58.7G 83 Linux\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\n\nroot@smarc-rzg3s:~#\n</code></pre> <p>Format eMMC.</p> <p></p><pre><code>mkfs.ext4 /dev/mmcblk0p1\nmkfs.ext4 /dev/mmcblk0p2\n</code></pre><p></p> <p>Format the eMMC and write the kernel, device tree, and rootfs.</p> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p></p><pre><code>mount /dev/mmcblk0p2 /mnt/\ntar xf /root/&lt;image name&gt;-smarc-rzg3s.rootfs.tar.bz2 -C /mnt/\numount /dev/mmcblk0p2\n</code></pre><p></p>"},{"location":"appendix/#setting-u-boot-for-emmc-boot","title":"Setting U-boot for eMMC boot","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Reset the board by pressing the reset button and interrupt the boot process by pressing the Enter key.</p> <pre><code>U-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg2l\nDRAM:  1.9 GiB\nSF: Detected mt25qu512a with page size 256 Bytes, erase size 4 KiB, total 64 MiB\nCore:  33 devices, 19 uclasses, devicetree: separate\nWDT:   watchdog@0000000012800800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nMMC:   sd@11c00000: 0, sd@11c10000: 1\nLoading Environment from MMC... Reading from MMC(0)... OK\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nU-boot WDT started!\nNet:   eth0: ethernet@11c20000, eth1: ethernet@11c30000\nHit any key to stop autoboot:  0\n=&gt;\n</code></pre> <p>Set environment variables in the u-boot environment to boot from eMMC.</p> <p></p><pre><code>setenv bootargs 'root=/dev/mmcblk0p2 rootwait'\nsetenv bootcmd 'mmc dev 1; ext4load mmc 0:1 0x48080000 Image-smarc-rzg2l.bin; ext4load mmc 0:1 0x48000000 r9a07g044l2-smarc.dtb; booti 0x48080000 - 0x48000000'\nsaveenv\n</code></pre><p></p> <pre><code>Saving Environment to MMC... Writing to MMC(0)\u2026.OK\n</code></pre> <p>Please reset the board again for eMMC boot.</p> <p>Reset the board by pressing the reset button and interrupt the boot process by pressing the Enter key.</p> <pre><code>U-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg2lc\nDRAM:  896 MiB\nSF: Detected mt25qu512a with page size 256 Bytes, erase size 4 KiB, total 64 MiB\nCore:  29 devices, 19 uclasses, devicetree: separate\nWDT:   watchdog@0000000012800800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nMMC:   sd@11c00000: 0, sd@11c10000: 1\nLoading Environment from MMC... Reading from MMC(0)... OK\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nU-boot WDT started!\nNet:   eth0: ethernet@11c20000\nHit any key to stop autoboot:  0\n=&gt;\n</code></pre> <p>Set environment variables in the u-boot environment to boot from eMMC.</p> <p></p><pre><code>setenv bootargs 'root=/dev/mmcblk0p2 rootwait'\nsetenv bootcmd 'mmc dev 1; ext4load mmc 0:1 0x48080000 Image-smarc-rzg2lc.bin; ext4load mmc 0:1 0x48000000 r9a07g044c2-smarc.dtb; booti 0x48080000 - 0x48000000'\nsaveenv\n</code></pre><p></p> <pre><code>Saving Environment to MMC... Writing to MMC(0)\u2026.OK\n</code></pre> <p>Please reset the board again for eMMC boot.</p> <p>Reset the board by pressing the reset button and interrupt the boot process by pressing the Enter key.</p> <pre><code>U-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg2ul\nDRAM:  896 MiB\nSW_ET0_EN: ON\nCore:  30 devices, 20 uclasses, devicetree: separate\nWDT:   watchdog@0000000012800800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nMMC:   sd@11c00000: 0, sd@11c10000: 1\nLoading Environment from MMC... Reading from MMC(0)... OK\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nU-boot WDT started!\nNet:   eth0: ethernet@11c30000\nHit any key to stop autoboot:  0\n=&gt;\n</code></pre> <p>Set environment variables in the u-boot environment to boot from eMMC.</p> <p></p><pre><code>setenv bootargs 'root=/dev/mmcblk0p2 rootwait'\nsetenv bootcmd 'mmc dev 1; ext4load mmc 0:1 0x48080000 Image-smarc-rzg2ul.bin; ext4load mmc 0:1 0x48000000 r9a07g043u11-smarc.dtb; booti 0x48080000 - 0x48000000'\nsaveenv\n</code></pre><p></p> <pre><code>Saving Environment to MMC... Writing to MMC(0)\u2026.OK\n</code></pre> <p>Please reset the board again for eMMC boot.</p> <p>Reset the board by pressing the reset button and interrupt the boot process by pressing the Enter key.</p> <pre><code>U-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg3s\nDRAM:  896 MiB\nCore:  31 devices, 15 uclasses, devicetree: separate\nMMC:   sd@11c00000: 0, sd@11c10000: 1, sd@11c20000: 2\nLoading Environment from MMC... Reading from MMC(0)... OK\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nNet:\nError: ethernet@11c30000 No valid MAC address found.\nNo ethernet found.\n\nHit any key to stop autoboot:  0\n=&gt;\n</code></pre> <p>Set environment variables in the u-boot environment to boot from eMMC.</p> <p></p><pre><code>env default -a\nsaveenv\n</code></pre><p></p> <pre><code>Saving Environment to MMC... Writing to MMC(0)\u2026.OK\n</code></pre> <p>Please reset the board again for eMMC boot.</p>"},{"location":"appendix/#how-to-boot-from-esd","title":"How to boot from eSD","text":"<p>In this section, the steps to boot from eSD are described.</p>"},{"location":"appendix/#prepare-micro-sd-card","title":"Prepare micro SD card","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Prepare the micro SD card using the <code>wic</code> image file.</p> <p>Two files (<code>bl2_bp_esd-smarc-rzg2l_pmic.bin</code> and <code>fip-smarc-rzg2l_pmic.bin</code>) are used for boot from eSD.</p> <ul> <li> <p>File and directory in the micro SD card</p> <p>Type/Number</p> <p>Filesystem</p> <p>Contents</p> <p>Primary #1 </p> <p>FAT32 </p> <ul> <li><code>Flash_Writer_SCIF_RZG2L_SMARC_PMIC_DDR4_2GB_1PCS.mot</code> </li> <li><code>bl2_bp_mmc-smarc-rzg2l_pmic.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg2l_pmic.srec</code> </li> <li><code>bl2_bp_esd-smarc-rzg2l_pmic.bin</code> </li> <li><code>fip-smarc-rzg2l_pmic.srec</code> </li> <li><code>fip-smarc-rzg2l_pmic.bin</code></li> </ul> <p>Primary #2 </p> <p>Ext4 </p> <p>./ \u251c\u2500\u2500 bin \u251c\u2500\u2500 boot \u3000  \u251c\u2500 Image \u3000  \u251c\u2500 Image-6.12.34-cip3-yocto-standard-gfd6f2e323a18   \u3000\u2514\u2500 r9a07g044l2-smarc.dtb \u251c\u2500\u2500 dev \u251c\u2500\u2500 etc \u251c\u2500\u2500 home \u251c\u2500\u2500 lib \u251c\u2500\u2500 media \u251c\u2500\u2500 mnt \u251c\u2500\u2500 proc \u251c\u2500\u2500 root \u251c\u2500\u2500 run \u251c\u2500\u2500 sbin \u251c\u2500\u2500 srv \u251c\u2500\u2500 sys \u251c\u2500\u2500 tmp \u251c\u2500\u2500 usr \u2514\u2500\u2500 var</p> </li> </ul> <p>Prepare the micro SD card using the <code>wic</code> image file.</p> <p>Two files (<code>bl2_bp_esd-smarc-rzg2lc.bin</code> and <code>fip-smarc-rzg2lc.bin</code>) are used for boot from eSD.</p> <ul> <li> <p>File and directory in the micro SD card</p> <p>Type/Number</p> <p>Filesystem</p> <p>Contents</p> <p>Primary #1 </p> <p>FAT32 </p> <ul> <li><code>Flash_Writer_SCIF_RZG2LC_SMARC_DDR4_1GB_1PCS.mot</code> </li> <li><code>bl2_bp_mmc-smarc-rzg2lc.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg2lc.srec</code> </li> <li><code>bl2_bp_esd-smarc-rzg2lc.bin</code> </li> <li><code>fip-smarc-rzg2lc.srec</code> </li> <li><code>fip-smarc-rzg2lc.bin</code></li> </ul> <p>Primary #2 </p> <p>Ext4 </p> <p>./ \u251c\u2500\u2500 bin \u251c\u2500\u2500 boot \u3000  \u251c\u2500 Image \u3000  \u251c\u2500 Image-6.12.34-cip3-yocto-standard-gb105f79b143c   \u3000\u2514\u2500 r9a07g044c2-smarc.dtb \u251c\u2500\u2500 dev \u251c\u2500\u2500 etc \u251c\u2500\u2500 home \u251c\u2500\u2500 lib \u251c\u2500\u2500 media \u251c\u2500\u2500 mnt \u251c\u2500\u2500 proc \u251c\u2500\u2500 root \u251c\u2500\u2500 run \u251c\u2500\u2500 sbin \u251c\u2500\u2500 srv \u251c\u2500\u2500 sys \u251c\u2500\u2500 tmp \u251c\u2500\u2500 usr \u2514\u2500\u2500 var</p> </li> </ul> <p>Prepare the micro SD card using the <code>wic</code> image file.</p> <p>Two files (<code>bl2_bp_esd-smarc-rzg2ul.bin</code> and <code>fip-smarc-rzg2ul.bin</code>) are used for boot from eSD.</p> <ul> <li> <p>File and directory in the micro SD card</p> <p>Type/Number</p> <p>Filesystem</p> <p>Contents</p> <p>Primary #1 </p> <p>FAT32 </p> <ul> <li><code>Flash_Writer_SCIF_RZG2UL_SMARC_DDR4_1GB_1PCS.mot</code> </li> <li><code>bl2_bp_mmc-smarc-rzg2ul.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg2ul.srec</code> </li> <li><code>bl2_bp_esd-smarc-rzg2ul.bin</code> </li> <li><code>fip-smarc-rzg2ul.srec</code> </li> <li><code>fip-smarc-rzg2ul.bin</code></li> </ul> <p>Primary #2 </p> <p>Ext4 </p> <p>./ \u251c\u2500\u2500 bin \u251c\u2500\u2500 boot \u3000  \u251c\u2500 Image \u3000  \u251c\u2500 Image-6.12.34-cip3-yocto-standard-gfd5929f36c66   \u3000\u2514\u2500 r9a07g043u11-smarc.dtb \u251c\u2500\u2500 dev \u251c\u2500\u2500 etc \u251c\u2500\u2500 home \u251c\u2500\u2500 lib \u251c\u2500\u2500 media \u251c\u2500\u2500 mnt \u251c\u2500\u2500 proc \u251c\u2500\u2500 root \u251c\u2500\u2500 run \u251c\u2500\u2500 sbin \u251c\u2500\u2500 srv \u251c\u2500\u2500 sys \u251c\u2500\u2500 tmp \u251c\u2500\u2500 usr \u2514\u2500\u2500 var</p> </li> </ul> <p>Prepare the micro SD card using the <code>wic</code> image file.</p> <p>Two files (<code>bl2_bp_esd-smarc-rzg3s.bin</code> and <code>fip-smarc-rzg3s.bin</code>) are used for boot from eSD.</p> <ul> <li> <p>File and directory in the micro SD card</p> <p>Type/Number</p> <p>Filesystem</p> <p>Contents</p> <p>Primary #1 </p> <p>FAT32 </p> <ul> <li><code>FlashWriter-smarc-rzg3s.mot</code> </li> <li><code>bl2_bp_mmc-smarc-rzg3s.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg3s.srec</code> </li> <li><code>bl2_bp_esd-smarc-rzg3s.bin</code> </li> <li><code>fip-smarc-rzg3s.srec</code> </li> <li><code>fip-smarc-rzg3s.bin</code></li> </ul> <p>Primary #2 </p> <p>Ext4 </p> <p>./ \u251c\u2500\u2500 bin \u251c\u2500\u2500 boot \u3000  \u251c\u2500 Image \u3000  \u251c\u2500 Image-6.12.34-cip3-yocto-standard-gfd5929f36c66   \u3000\u2514\u2500 r9a08g045s33-smarc.dtb \u251c\u2500\u2500 dev \u251c\u2500\u2500 etc \u251c\u2500\u2500 home \u251c\u2500\u2500 lib \u251c\u2500\u2500 media \u251c\u2500\u2500 mnt \u251c\u2500\u2500 proc \u251c\u2500\u2500 root \u251c\u2500\u2500 run \u251c\u2500\u2500 sbin \u251c\u2500\u2500 srv \u251c\u2500\u2500 sys \u251c\u2500\u2500 tmp \u251c\u2500\u2500 usr \u2514\u2500\u2500 var</p> </li> </ul>"},{"location":"appendix/#set-smarc-evk-board-for-esd-boot","title":"Set SMARC EVK board for eSD boot","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>To set the board to eSD Boot mode, set the SW11 as below:</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON <p>Then, change SW1 on the module to select micro SD card slot instead of eMMC.</p> <p></p> SW1-1 SW1-2 ON ON <p>Please insert the micro SD card into the SOM module slot.</p> <p></p> <p>To set the board to eSD Boot mode, set the SW11 as below:</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON <p>Then, change SW1 on the module to select micro SD card slot instead of eMMC.</p> <p></p> SW1-1 SW1-2 ON ON <p>Please insert the micro SD card into the SOM module slot.</p> <p></p> <p>To set the board to eSD Boot mode, set the SW11 as below:</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON <p>Then, change SW1 on the module to select micro SD card slot instead of eMMC.</p> <p></p> SW1-1 SW1-2 ON ON <p>Please insert the micro SD card into the SOM module slot.</p> <p></p> <p>To set the board to eSD Boot mode, set the SW_MODE as below:</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] ON ON OFF ON <p>Then, change SW_CONFIG on the module to enable micro SD card slot.</p> <p></p> SW_CONFIG[1] SW_CONFIG[2] SW_CONFIG[3] SW_CONFIG[4] SW_CONFIG[5] SW_CONFIG[6] OFF ON ON OFF OFF OFF <p>Please insert the micro SD card into the SOM module slot.</p> <p></p>"},{"location":"appendix/#power-on-and-boot","title":"Power on and boot","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>After pressing the POWER button to turn on the power and RESET button, Linux will be booted from eSD.</p> <pre><code>NOTICE:  BL2: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL2: Built : 13:04:30, Sep 25 2025\nNOTICE:  BL2: RZ/G2L\nNOTICE:  BL2: SYS_LSI_MODE: 0x0\nNOTICE:  BL2: SYS_LSI_DEVID: 0x1841c447\nNOTICE:  BL2: SYS_LSI_PRR: 0x0\nNOTICE:  BL2: Booting BL31\nNOTICE:  BL31: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL31: Built : 13:04:30, Sep 25 2025\n\n\nU-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg2l\nDRAM:  1.9 GiB\nSF: Detected mt25qu512a with page size 256 Bytes, erase size 4 KiB, total 64 MiB\nCore:  33 devices, 19 uclasses, devicetree: separate\nWDT:   watchdog@0000000012800800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nMMC:   sd@11c00000: 0, sd@11c10000: 1\nLoading Environment from MMC... Reading from MMC(0)... *** Warning - bad CRC, using default environment\n\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (0s timeout)\nU-boot WDT started!\nNet:\nWarning: ethernet@11c20000 (eth0) using random MAC address - ca:85:51:ea:88:d2\neth0: ethernet@11c20000\nWarning: ethernet@11c30000 (eth1) using random MAC address - 4a:64:b3:46:91:8f, eth1: ethernet@11c30000\n\nHit any key to stop autoboot:  0\n## Resetting to default environment\nCard did not respond to voltage select! : -110\n26690048 bytes read in 2086 ms (12.2 MiB/s)\n48482 bytes read in 5 ms (9.2 MiB/s)\nMoving Image from 0x48080000 to 0x48200000, end=49c30000\n## Flattened Device Tree blob at 48000000\n   Booting using the fdt blob at 0x48000000\nWorking FDT set to 48000000\n   Loading Device Tree to 0000000057ff1000, end 0000000057fffd61 ... OK\nWorking FDT set to 57ff1000\nChanging the current FDT in 57ff1000.\n   Config Node /soc/mmc@11c00000\n      Set property vmmc-supply : &lt;&amp;/regulator-vcc-sdhi0&gt;\n   Config Node /soc/mmc@11c00000\n      Set property vqmmc-supply : &lt;&amp;/regulator-vccq-sdhi0&gt;\n\nStarting kernel ...\n\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x412fd050]\n[    0.000000] Linux version 6.12.34-cip3-yocto-standard-gfd6f2e323a18 (oe-user@oe-host)\n:\n:\nPoky (Yocto Project Reference Distro) 5.0.11 smarc-rzg2l ttySC0\n\nsmarc-rzg2l login: root\nroot@smarc-rzg2l:~#\n</code></pre> <p>After pressing the POWER button to turn on the power and RESET button, Linux will be booted from eSD.</p> <pre><code>NOTICE:  BL2: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL2: Built : 13:04:30, Sep 25 2025\nNOTICE:  BL2: RZ/G2LC\nNOTICE:  BL2: SYS_LSI_MODE: 0x0\nNOTICE:  BL2: SYS_LSI_DEVID: 0x1841c447\nNOTICE:  BL2: SYS_LSI_PRR: 0x0\nNOTICE:  BL2: Booting BL31\nNOTICE:  BL31: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL31: Built : 13:04:30, Sep 25 2025\n\n\nU-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg2lc\nDRAM:  896 MiB\nSF: Detected mt25qu512a with page size 256 Bytes, erase size 4 KiB, total 64 MiB\nCore:  29 devices, 19 uclasses, devicetree: separate\nWDT:   watchdog@0000000012800800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nMMC:   sd@11c00000: 0, sd@11c10000: 1\nLoading Environment from MMC... Reading from MMC(0)... *** Warning - bad CRC, using default environment\n\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (0s timeout)\nU-boot WDT started!\nNet:\nWarning: ethernet@11c20000 (eth0) using random MAC address - fa:f5:de:75:cf:36\neth0: ethernet@11c20000\n\nHit any key to stop autoboot:  0\n## Resetting to default environment\nCard did not respond to voltage select! : -110\n26690048 bytes read in 2086 ms (12.2 MiB/s)\n43306 bytes read in 6 ms (6.9 MiB/s)\nMoving Image from 0x48080000 to 0x48200000, end=49c30000\n## Flattened Device Tree blob at 48000000\n   Booting using the fdt blob at 0x48000000\nWorking FDT set to 48000000\n   Loading Device Tree to 0000000057ff2000, end 0000000057fff929 ... OK\nWorking FDT set to 57ff2000\nChanging the current FDT in 57ff2000.\n   Config Node /soc/mmc@11c00000\n      Set property vmmc-supply : &lt;&amp;/regulator-vcc-sdhi0&gt;\n   Config Node /soc/mmc@11c00000\n      Set property vqmmc-supply : &lt;&amp;/regulator-vccq-sdhi0&gt;\n\nStarting kernel ...\n\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x412fd050]\n[    0.000000] Linux version 6.12.34-cip3-yocto-standard-gb105f79b143c (oe-user@oe-host)\n:\n:\nPoky (Yocto Project Reference Distro) 5.0.11 smarc-rzg2lc ttySC0\n\nsmarc-rzg2lc login: root\nroot@smarc-rzg2lc:~#\n</code></pre> <p>After pressing the POWER button to turn on the power and RESET button, Linux will be booted from eSD.</p> <pre><code>NOTICE:  BL2: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL2: Built : 13:04:30, Sep 25 2025\nNOTICE:  BL2: RZ/G2UL Type 1\nNOTICE:  BL2: SYS_LSI_MODE: 0x0\nNOTICE:  BL2: SYS_LSI_DEVID: 0x8450447\nNOTICE:  BL2: SYS_LSI_PRR: 0x1101\nNOTICE:  BL2: Booting BL31\nNOTICE:  BL31: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL31: Built : 13:04:30, Sep 25 2025\n\n\nU-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg2ul\nDRAM:  896 MiB\nSW_ET0_EN: ON\nCore:  30 devices, 20 uclasses, devicetree: separate\nWDT:   watchdog@0000000012800800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (60s timeout)\nMMC:   sd@11c00000: 0, sd@11c10000: 1\nLoading Environment from MMC... Reading from MMC(0)... *** Warning - bad CRC, using default environment\n\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nWDT:   Started watchdog@12800800 with servicing every 1000ms (0s timeout)\nU-boot WDT started!\nNet:\nWarning: ethernet@11c30000 (eth0) using random MAC address - fa:78:51:5a:23:8c\neth0: ethernet@11c30000\nHit any key to stop autoboot:  0\n## Resetting to default environment\nCard did not respond to voltage select! : -110\n26690048 bytes read in 2091 ms (12.2 MiB/s)\n35707 bytes read in 5 ms (6.8 MiB/s)\nMoving Image from 0x48080000 to 0x48200000, end=49c30000\n## Flattened Device Tree blob at 48000000\n   Booting using the fdt blob at 0x48000000\nWorking FDT set to 48000000\n   Loading Device Tree to 0000000057ff4000, end 0000000057fffb7a ... OK\nWorking FDT set to 57ff4000\n\nStarting kernel ...\n\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x412fd050]\n[    0.000000] Linux version 6.12.34-cip3-yocto-standard-gfd5929f36c66 (oe-user@oe-host)\n:\n:\nPoky (Yocto Project Reference Distro) 5.0.11 smarc-rzg2ul ttySC0\n\nsmarc-rzg2ul login: root\nroot@smarc-rzg2ul:~#\n</code></pre> <p>After pressing the POWER button to turn on the power and RESET button, Linux will be booted from eSD.</p> <pre><code>NOTICE:  BL2: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL2: Built : 13:04:30, Sep 25 2025\nNOTICE:  BL2: SYS_LSI_MODE: 0x3251\nNOTICE:  BL2: SYS_LSI_DEVID: 0x85e0447\nNOTICE:  BL2: Booting BL31\nNOTICE:  BL31: v2.10.5(release):2.10.5/rz_1.1.0-dirty\nNOTICE:  BL31: Built : 13:04:30, Sep 25 2025\n\n\nU-Boot 2024.07 (Sep 12 2025 - 16:08:34 +0000)\n\nCPU:   Renesas Electronics CPU rev 1.0\nModel: smarc-rzg3s\nDRAM:  896 MiB\nCore:  31 devices, 15 uclasses, devicetree: separate\nMMC:   sd@11c00000: 0, sd@11c10000: 1, sd@11c20000: 2\nLoading Environment from MMC... Reading from MMC(0)... OK\nIn:    serial@1004b800\nOut:   serial@1004b800\nErr:   serial@1004b800\nNet:\nError: ethernet@11c30000 No valid MAC address found.\nNo ethernet found.\n\nHit any key to stop autoboot:  0\n## Resetting to default environment\nCard did not respond to voltage select! : -110\n26690048 bytes read in 920 ms (27.7 MiB/s)\n45489 bytes read in 2 ms (21.7 MiB/s)\nMoving Image from 0x48080000 to 0x48200000, end=49c30000\n## Flattened Device Tree blob at 48000000\n   Booting using the fdt blob at 0x48000000\nWorking FDT set to 48000000\n   Loading Device Tree to 0000000057ff1000, end 0000000057fff1b0 ... OK\nWorking FDT set to 57ff1000\n\nStarting kernel ...\n\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x412fd050]\n[    0.000000] Linux version 6.12.34-cip3-yocto-standard-gfd5929f36c66 (oe-user@oe-host)\n:\n:\nPoky (Yocto Project Reference Distro) 5.0.11 smarc-rzg3s ttySC3\n\nsmarc-rzg3s login: root\nroot@smarc-rzg3s:~#\n</code></pre>"},{"location":"evk/","title":"Evaluation Board Kit (EVK)","text":""},{"location":"evk/#evaluation-board-kit-evk","title":"Evaluation Board Kit (EVK)","text":""},{"location":"evk/#rzg2l-evaluation-board-kit-evk","title":"RZ/G2L Evaluation Board Kit (EVK)","text":"<p> Get RZ/G2L EVK </p>"},{"location":"evk/#rzg2lc-evaluation-board-kit-evk","title":"RZ/G2LC Evaluation Board Kit (EVK)","text":"<p> Get RZ/G2LC EVK</p>"},{"location":"evk/#rzg2ul-evaluation-board-kit-evk","title":"RZ/G2UL Evaluation Board Kit (EVK)","text":"<p> Get RZ/G2UL EVK</p>"},{"location":"evk/#rzg3s-evaluation-board-kit-evk","title":"RZ/G3S Evaluation Board Kit (EVK)","text":"<p> Get RZ/G3S EVK</p> <p>Back to Home &gt; Back to Getting Started &gt;</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#getting-started","title":"Getting Started","text":"<p>This page explains how to start-up the Renesas RZ Linux BSP Plus.</p> <p>Note</p> <p>Hereafter, we use following terminology.</p> <ul> <li>EVK: Refers \"Evaluation Board Kit\".</li> </ul>"},{"location":"getting_started/#introduction","title":"Introduction","text":"<p>Getting Started explains the instruction to run the Renesas RZ Linux BSP Plus.</p> <p>Common instructions are explained in this document.</p>"},{"location":"getting_started/#step-1-obtain-an-evaluation-board","title":"Step 1: Obtain an evaluation board","text":"<p>Click the button below to get the board.</p> <p>BoardGet the board for RZ MPUs.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p></p> <p>The RZ/G2L Evaluation Board Kit (EVK) is the ideal board kit for RZ/G2L evaluation.</p> <p>Following items are included in the RZ/G2L Evaluation Board Kit.</p> Equipment Details RZ/G2L Evaluation Board Evaluation board itself Micro USB to Serial Cable For serial communication between PC and the board <p></p> <p>The RZ/G2LC Evaluation Board Kit (EVK) is the ideal board kit for RZ/G2LC evaluation.</p> <p>Following items are included in the RZ/G2LC Evaluation Board Kit.</p> Equipment Details RZ/G2LC Evaluation Board Evaluation board itself Micro USB to Serial Cable For serial communication between PC and the board <p></p> <p>The RZ/G2UL Evaluation Board Kit (EVK) is the ideal board kit for RZ/G2UL evaluation.</p> <p>Following items are included in the RZ/G2UL Evaluation Board Kit.</p> Equipment Details RZ/G2UL Evaluation Board Evaluation board itself Micro USB to Serial Cable For serial communication between PC and the board <p></p> <p>The RZ/G3S Evaluation Board Kit (EVK) is the ideal board kit for RZ/G3S evaluation.</p> <p>Following items are included in the RZ/G3S Evaluation Board Kit.</p> Equipment Details RZ/G3S Evaluation Board Evaluation board itself Micro USB to Serial Cable For serial communication between PC and the board"},{"location":"getting_started/#step-2-obtain-necessary-environment","title":"Step 2: Obtain necessary environment","text":""},{"location":"getting_started/#1-necessary-equipment","title":"1. Necessary Equipment","text":"<p>Please prepare the following equipment for your EVK.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Equipment</p> <p>Purpose</p> <p>Remarks</p> <p>RZ/G2L Module Board (SMARC2.1) + Common Carrier Board  (P/N: RTK9744L23S01000BE)</p> <p>It is used to evaluate Linux boot. </p> <p>Included with RZ/G2L Evaluation Board Kit (EVK) </p> <p>USB serial cable </p> <p>It is used to connect the PC and the EVK and get the console output of Linux running on the EVK.  * Connect to micro USB type-B (2.0) port of EVK</p> <p>Included with RZ/G2L Evaluation Board Kit (EVK) </p> <p>USB Power Delivery (PD) AC adapter + USB C PD cable for power supply </p> <p>Used for power supply  * Connect to USB type-C port of EVK</p> <p>PC </p> <p>It can be used to operate the demo environment from a terminal on a PC, rebuild HMI SDK Linux, or use it as a development device for applications.  At least 100GB or more free space of HDD/SDD  8GB or more RAM * 4-core or more CPU</p> <p>The OS of the PC is as follows. However, Windows PCs are for debugging using a serial connection and cannot be used for development such as building software.  Ubuntu 22.04 LTS, 64-bit version  Windows 10 or 11 </p> <p>micro SD card </p> <p>Linux and demo images provided by the HMI SDK are written and used as a Linux boot device.  Type: SDHC  Speed class: UHI-Class 10 * Capacity: Minimum 4GB, recommended 8GB</p> <p>Linux on the RZ/G2L EVK is booted from a micro SD card by eSD boot. </p> <p>Equipment</p> <p>Purpose</p> <p>Remarks</p> <p>RZ/G2LC Module Board (SMARC2.1) + Common Carrier Board  (P/N: RTK9744C22S01000BE)</p> <p>It is used to evaluate Linux boot. </p> <p>Included with RZ/G2LC Evaluation Board Kit (EVK) </p> <p>USB serial cable </p> <p>It is used to connect the PC and the EVK and get the console output of Linux running on the EVK.  * Connect to micro USB type-B (2.0) port of EVK</p> <p>Included with RZ/G2LC Evaluation Board Kit (EVK) </p> <p>USB Power Delivery (PD) AC adapter + USB C PD cable for power supply </p> <p>Used for power supply  * Connect to USB type-C port of EVK</p> <p>PC </p> <p>It can be used to operate the demo environment from a terminal on a PC, rebuild HMI SDK Linux, or use it as a development device for applications.  At least 100GB or more free space of HDD/SDD  8GB or more RAM * 4-core or more CPU</p> <p>The OS of the PC is as follows. However, Windows PCs are for debugging using a serial connection and cannot be used for development such as building software.  Ubuntu 22.04 LTS, 64-bit version  Windows 10 or 11 </p> <p>micro SD card </p> <p>Linux and demo images provided by the HMI SDK are written and used as a Linux boot device.  Type: SDHC  Speed class: UHI-Class 10 * Capacity: Minimum 4GB, recommended 8GB</p> <p>Linux on the RZ/G2LC EVK is booted from a micro SD card by eSD boot. </p> <p>Equipment</p> <p>Purpose</p> <p>Remarks</p> <p>RZ/G2UL Module Board (SMARC2.1) + Common Carrier Board  (P/N: RTK9743U11S01000BE)</p> <p>It is used to evaluate Linux boot. </p> <p>Included with RZ/G2UL Evaluation Board Kit (EVK) </p> <p>USB serial cable </p> <p>It is used to connect the PC and the EVK and get the console output of Linux running on the EVK.  * Connect to micro USB type-B (2.0) port of EVK</p> <p>Included with RZ/G2UL Evaluation Board Kit (EVK) </p> <p>USB Power Delivery (PD) AC adapter + USB C PD cable for power supply </p> <p>Used for power supply  * Connect to USB type-C port of EVK</p> <p>PC </p> <p>It can be used to operate the demo environment from a terminal on a PC, rebuild HMI SDK Linux, or use it as a development device for applications.  At least 100GB or more free space of HDD/SDD  8GB or more RAM * 4-core or more CPU</p> <p>The OS of the PC is as follows. However, Windows PCs are for debugging using a serial connection and cannot be used for development such as building software.  Ubuntu 22.04 LTS, 64-bit version  Windows 10 or 11 </p> <p>micro SD card </p> <p>Linux and demo images provided by the HMI SDK are written and used as a Linux boot device.  Type: SDHC  Speed class: UHI-Class 10 * Capacity: Minimum 4GB, recommended 8GB</p> <p>Linux on the RZ/G2UL EVK is booted from a micro SD card by eSD boot. </p> <p>Equipment</p> <p>Purpose</p> <p>Remarks</p> <p>RZ/G3S Module Board (SMARC2.1) + Common Carrier Board II   (P/N: RTK9845S33S01000BE)</p> <p>It is used to evaluate Linux boot. </p> <p>Included with RZ/G3S Evaluation Board Kit (EVK) </p> <p>USB serial cable </p> <p>It is used to connect the PC and the EVK and get the console output of Linux running on the EVK.  * Connect to micro USB type-B (2.0) port of EVK</p> <p>Included with RZ/G3S Evaluation Board Kit (EVK) </p> <p>USB Power Delivery (PD) AC adapter + USB C PD cable for power supply </p> <p>Used for power supply  * Connect to USB type-C port of EVK</p> <p>PC </p> <p>It can be used to operate the demo environment from a terminal on a PC, rebuild HMI SDK Linux, or use it as a development device for applications.  At least 100GB or more free space of HDD/SDD  8GB or more RAM * 4-core or more CPU</p> <p>The OS of the PC is as follows. However, Windows PCs are for debugging using a serial connection and cannot be used for development such as building software.  Ubuntu 22.04 LTS, 64-bit version  Windows 10 or 11 </p> <p>micro SD card </p> <p>Linux and demo images provided by the HMI SDK are written and used as a Linux boot device.  Type: SDHC  Speed class: UHI-Class 10 * Capacity: Minimum 4GB, recommended 8GB</p> <p>Linux on the RZ/G3S EVK is booted from a micro SD card by eSD boot. </p>"},{"location":"getting_started/#2-necessary-software","title":"2. Necessary Software","text":"<p>Please install following software on Linux PC.</p> <ul> <li>git</li> </ul>"},{"location":"getting_started/#step-3-obtain-and-build-renesas-rz-linux-bsp-plus-source-code","title":"Step 3: Obtain and Build Renesas RZ Linux BSP Plus source code","text":"<p>Please refer to How To Build Linux BSP Plus.</p>"},{"location":"getting_started/#step-4-deploy-renesas-rz-linux-bsp-plus","title":"Step 4: Deploy Renesas RZ Linux BSP Plus","text":"<p>You can prepare the microSD card by the following method. Please select one of them and follow the steps.</p> <p>Below steps are for <code>wic</code> image.</p>"},{"location":"getting_started/#1-in-case-of-windows-pc","title":"1. In case of Windows PC","text":"<ol> <li>Download or copy the release package into your PC</li> <li>Unzip the release package and extract an image file</li> <li> <p>Write the image file to your micro SD card by using one of the following tool</p> <ul> <li>Win32 Disk Imager</li> <li>balenaEtcher</li> </ul> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2l.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p>Caution</p> <p>Even if you see a message such as <code>you need to format the disk</code> before/after writing the image, do not format the SD card.</p> <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2lc.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p>Caution</p> <p>Even if you see a message such as <code>you need to format the disk</code> before/after writing the image, do not format the SD card.</p> <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2ul.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p>Caution</p> <p>Even if you see a message such as <code>you need to format the disk</code> before/after writing the image, do not format the SD card.</p> <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg3s.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p>Caution</p> <p>Even if you see a message such as <code>you need to format the disk</code> before/after writing the image, do not format the SD card.</p> </li> </ol>"},{"location":"getting_started/#2-in-case-of-linux-pc-ubuntu","title":"2. In case of Linux PC (Ubuntu)","text":"<ol> <li>Download or copy the release package into your PC</li> <li>Unzip the release package and extract an image file</li> <li> <p>Insert the micro SD Card into your Linux PC and find the device name of the SD card</p> <p>Use <code>lsblk</code> command to check the device name as follows.</p> <ul> <li> <p>Before inserting the SD card</p> <p></p><pre><code>lsblk\n</code></pre><p></p> <pre><code>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n    (snip)\nnvme0n1     259:0    0 465.8G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0   512M  0 part /boot/efi\n\u2514\u2500nvme0n1p2 259:2    0 465.3G  0 part /\n</code></pre> </li> <li> <p>After inserting the SD card</p> <p></p><pre><code>lsblk\n</code></pre><p></p> <pre><code>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n    (snip)\nnvme0n1     259:0    0 465.8G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0   512M  0 part /boot/efi\n\u2514\u2500nvme0n1p2 259:2    0 465.3G  0 part /\nsda           8:0    1  14.5G  0 disk\n\u251c\u2500sda1        8:1    1   500M  0 part /media/user/boot\n\u2514\u2500sda2        8:2    1   3.4G  0 part /media/user/rootfs\n</code></pre> </li> </ul> <p>Note</p> <p>The device name is assigned to the SD card by Linux on your Host PC. It may be named <code>/dev/sd*</code> (<code>*</code> is a letter representing the physical drive). It is <code>/dev/sda</code> in this sample.</p> </li> <li> <p>Unmount the SD card if it is mounted</p> <p>Use <code>umount</code> command with mount points that are displayed when you executed <code>lsblk</code> command. For example:</p> <p></p><pre><code>umount /media/user/boot\numount /media/user/rootfs\n</code></pre><p></p> </li> <li> <p>Write the image to the SD card</p> <p>Use <code>bmaptool</code> command with device name of SD card is displayed when you executed <code>lsblk</code> command. For example:</p> <p></p><pre><code>sudo bmaptool copy &lt;wic image&gt;.wic.gz /dev/sda\n</code></pre><p></p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2l.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Additionally, the file below is also required:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2l.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2lc.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Additionally, the file below is also required:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2lc.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2ul.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Additionally, the file below is also required:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2ul.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p>Image file is:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg3s.rootfs.wic.gz</code></li> </ul> <p>Note</p> <p>Additionally, the file below is also required:</p> <ul> <li><code>&lt;image name&gt;-smarc-rzg3s.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>Where <code>&lt;image name&gt;</code> is one of the following:</p> <ul> <li><code>core-image-minimal</code></li> </ul> </li> </ol>"},{"location":"getting_started/#step-5-reference-board-setting","title":"Step 5: Reference Board Setting","text":""},{"location":"getting_started/#1-setup-evks-peripheral","title":"1. Setup EVK's peripheral","text":"<p>Please setup following below diagram.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p></p> <p></p> <p></p> <p></p>"},{"location":"getting_started/#2-evks-dip-switch","title":"2. EVK's DIP switch","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>EVK's DIP switch (SW1 and SW11) reference.</p> <ul> <li> <p>SW1</p> <ul> <li> <p>SD Card</p> <p></p> SW1-1 SW1-2 ON ON </li> <li> <p>eMMC</p> <p></p> SW1-1 SW1-2 ON OFF </li> </ul> </li> <li> <p>SW11</p> <ul> <li> <p>SCIF Download Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF ON OFF ON </li> <li> <p>QSPI Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF OFF OFF ON </li> <li> <p>eMMC Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON OFF OFF ON </li> <li> <p>eSD Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON </li> </ul> <p>Note</p> <ul> <li> <p>Input voltage selection</p> SW11-4 Input voltage selection OFF Input 9V ON Input 5V </li> </ul> </li> </ul> <p>EVK's DIP switch (SW1 and SW11) reference.</p> <ul> <li> <p>SW1</p> <ul> <li> <p>SD Card</p> <p></p> SW1-1 SW1-2 SW1-3 SW1-4 SW1-5 SW1-6 ON ON ON OFF ON ON </li> <li> <p>eMMC</p> <p></p> SW1-1 SW1-2 SW1-3 SW1-4 SW1-5 SW1-6 ON OFF ON OFF ON ON </li> </ul> </li> <li> <p>SW11</p> <ul> <li> <p>SCIF Download Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF ON OFF ON </li> <li> <p>QSPI Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF OFF OFF ON </li> <li> <p>eMMC Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON OFF OFF ON </li> <li> <p>eSD Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON </li> </ul> <p>Note</p> <ul> <li> <p>Input voltage selection</p> SW11-4 Input voltage selection OFF Input 9V ON Input 5V </li> </ul> </li> </ul> <p>EVK's DIP switch (SW1 and SW11) reference.</p> <ul> <li> <p>SW1</p> <ul> <li> <p>SD Card</p> <p></p> SW1-1 SW1-2 SW1-3 ON ON ON </li> <li> <p>eMMC</p> <p></p> SW1-1 SW1-2 SW1-3 ON OFF ON </li> </ul> </li> <li> <p>SW11</p> <ul> <li> <p>SCIF Download Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF ON OFF ON </li> <li> <p>QSPI Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF OFF OFF ON </li> <li> <p>eMMC Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON OFF OFF ON </li> <li> <p>eSD Boot Mode</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON </li> </ul> <p>Note</p> <ul> <li> <p>Input voltage selection</p> SW11-4 Input voltage selection OFF Input 9V ON Input 5V </li> </ul> </li> </ul> <p>EVK's DIP switch (SW_CONFIG and SW_MODE) reference.</p> <ul> <li> <p>SW_CONFIG</p> <ul> <li> <p>SD Card</p> <p></p> SW_CONFIG[1] SW_CONFIG[2] SW_CONFIG[3] SW_CONFIG[4] SW_CONFIG[5] SW_CONFIG[6] OFF ON ON OFF OFF OFF </li> <li> <p>eMMC</p> <p></p> SW_CONFIG[1] SW_CONFIG[2] SW_CONFIG[3] SW_CONFIG[4] SW_CONFIG[5] SW_CONFIG[6] OFF OFF ON OFF OFF OFF </li> </ul> </li> <li> <p>SW_MODE</p> <ul> <li> <p>SCIF Download Mode</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] OFF ON OFF ON </li> <li> <p>QSPI Boot Mode</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] OFF OFF OFF ON </li> <li> <p>eMMC Boot Mode</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] ON OFF OFF ON </li> <li> <p>eSD Boot Mode</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] ON ON OFF ON </li> </ul> </li> </ul>"},{"location":"getting_started/#3-prepare-for-flashing-boot-loader-into-evk","title":"3. Prepare for Flashing Boot Loader into EVK","text":"<p>Connect the board to the programing PC by using the USB serial cable.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <ol> <li> <p>To set the board to SCIF Download mode, set the SW11 as below.</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF ON OFF ON </li> <li> <p>Press the power button to turn on the power.</p> <ul> <li>When turning on the power, press and hold the power button for 1 second.</li> <li>When turn off the power, press and hold the power button for 2 seconds</li> </ul> <p></p> </li> <li> <p>Bring up TeraTerm and select the File &gt; New Connection to set the connection on the software.</p> <p></p> </li> <li> <p>Select the Setup &gt; Serial port to set the settings about serial communication protocol on TeraTerm.</p> <p>Set the settings for the serial communication in TeraTerm as below:</p> Variable Value Baud rate <code>115200</code> bps Data <code>8 bit</code> Parity <code>none</code> Stop <code>1 bit</code> Flow control <code>none</code> <p></p> </li> <li> <p>Select the Setup &gt; Terminal to set the new-line code.</p> Variable Value New-line <code>CR</code> or <code>AUTO</code> <p></p> </li> <li> <p>After finishing all settings, when the reset button is pressed, the message below will be displayed on the terminal.</p> <p></p> <p></p> </li> </ol> <ol> <li> <p>To set the board to SCIF Download mode, set the SW11 as below.</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF ON OFF ON </li> <li> <p>Press the power button to turn on the power.</p> <ul> <li>When turning on the power, press and hold the power button for 1 second.</li> <li>When turn off the power, press and hold the power button for 2 seconds</li> </ul> <p></p> </li> <li> <p>Bring up TeraTerm and select the File &gt; New Connection to set the connection on the software.</p> <p></p> </li> <li> <p>Select the Setup &gt; Serial port to set the settings about serial communication protocol on TeraTerm.</p> <p>Set the settings for the serial communication in TeraTerm as below:</p> Variable Value Baud rate <code>115200</code> bps Data <code>8 bit</code> Parity <code>none</code> Stop <code>1 bit</code> Flow control <code>none</code> <p></p> </li> <li> <p>Select the Setup &gt; Terminal to set the new-line code.</p> Variable Value New-line <code>CR</code> or <code>AUTO</code> <p></p> </li> <li> <p>After finishing all settings, when the reset button is pressed, the message below will be displayed on the terminal.</p> <p></p> <p></p> </li> </ol> <ol> <li> <p>To set the board to SCIF Download mode, set the SW11 as below.</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF ON OFF ON </li> <li> <p>Press the power button to turn on the power.</p> <ul> <li>When turning on the power, press and hold the power button for 1 second.</li> <li>When turn off the power, press and hold the power button for 2 seconds</li> </ul> <p></p> </li> <li> <p>Bring up TeraTerm and select the File &gt; New Connection to set the connection on the software.</p> <p></p> </li> <li> <p>Select the Setup &gt; Serial port to set the settings about serial communication protocol on TeraTerm.</p> <p>Set the settings for the serial communication in TeraTerm as below:</p> Variable Value Baud rate <code>115200</code> bps Data <code>8 bit</code> Parity <code>none</code> Stop <code>1 bit</code> Flow control <code>none</code> <p></p> </li> <li> <p>Select the Setup &gt; Terminal to set the new-line code.</p> Variable Value New-line <code>CR</code> or <code>AUTO</code> <p></p> </li> <li> <p>After finishing all settings, when the reset button is pressed, the message below will be displayed on the terminal.</p> <p></p> <p></p> </li> </ol> <ol> <li> <p>To set the board to SCIF Download mode, set the SW_MODE as below.</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] OFF ON OFF ON </li> <li> <p>Press the power button to turn on the power.</p> <p></p> </li> <li> <p>Bring up TeraTerm and select the File &gt; New Connection to set the connection on the software.</p> <p></p> </li> <li> <p>Select the Setup &gt; Serial port to set the settings about serial communication protocol on TeraTerm.</p> <p>Set the settings for the serial communication in TeraTerm as below:</p> Variable Value Baud rate <code>115200</code> bps Data <code>8 bit</code> Parity <code>none</code> Stop <code>1 bit</code> Flow control <code>none</code> <p></p> </li> <li> <p>Select the Setup &gt; Terminal to set the new-line code.</p> Variable Value New-line <code>CR</code> or <code>AUTO</code> <p></p> </li> <li> <p>After finishing all settings, when the reset button is pressed, the message below will be displayed on the terminal.</p> <p></p> <p></p> </li> </ol>"},{"location":"getting_started/#4-download-flash-writer-to-ram","title":"4. Download Flash Writer to RAM","text":"<p>Flash Writer is a small program that is downloaded into internal RAM inside the target device to assist in programming the boot loader into Flash memory.</p> <p>Turn on the power of the board by pressing SW9. The messages below are shown on the terminal.</p> <pre><code> SCIF Download mode\n (C) Renesas Electronics Corp.\n\n-- Load Program to SystemRAM ---------------\nplease send !\n</code></pre> <p>Send an image of <code>Flash Writer</code> using the terminal software after the message please send ! is shown.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p><code>Flash Writer</code> image file is:</p> <ul> <li><code>Flash_Writer_SCIF_RZG2L_SMARC_PMIC_DDR4_2GB_1PCS.mot</code></li> </ul> <p>Below is a sample procedure with TeraTerm.</p> <ol> <li> <p>Open a Send file dialog by selecting File &gt; Send file menu.</p> <p></p> <p></p> </li> <li> <p>Select the image to be send and click Open button.</p> <p></p> </li> <li> <p>The image will be sent to the board via serial connection.</p> <p></p> </li> <li> <p>After successfully downloading the binary, <code>Flash Writer</code> starts automatically and shows a message like below on the terminal.</p> <pre><code>Flash writer for RZ/G2 Series V1.02 Nov.15,2021\nProduct Code : RZ/G2L\n&gt;\n</code></pre> </li> </ol> <p><code>Flash Writer</code> image file is:</p> <ul> <li><code>Flash_Writer_SCIF_RZG2LC_SMARC_DDR4_1GB_1PCS.mot</code></li> </ul> <p>Below is a sample procedure with TeraTerm.</p> <ol> <li> <p>Open a Send file dialog by selecting File &gt; Send file menu.</p> <p></p> <p></p> </li> <li> <p>Select the image to be send and click Open button. The following image is for the RZ/G2L. Please select the Flash Writer image that corresponds to your target device.</p> <p></p> </li> <li> <p>The image will be sent to the board via serial connection.</p> <p></p> </li> <li> <p>After successfully downloading the binary, <code>Flash Writer</code> starts automatically and shows a message like below on the terminal.</p> <pre><code>Flash writer for RZ/G2 Series V1.02 Nov.15,2021\nProduct Code : RZ/G2LC\n&gt;\n</code></pre> </li> </ol> <p><code>Flash Writer</code> image file is:</p> <ul> <li><code>Flash_Writer_SCIF_RZG2UL_SMARC_DDR4_1GB_1PCS.mot</code></li> </ul> <p>Below is a sample procedure with TeraTerm.</p> <ol> <li> <p>Open a Send file dialog by selecting File &gt; Send file menu.</p> <p></p> <p></p> </li> <li> <p>Select the image to be send and click Open button. The following image is for the RZ/G2L. Please select the Flash Writer image that corresponds to your target device.</p> <p></p> </li> <li> <p>The image will be sent to the board via serial connection.</p> <p></p> </li> <li> <p>After successfully downloading the binary, <code>Flash Writer</code> starts automatically and shows a message like below on the terminal.</p> <pre><code>Flash writer for RZ/G2 Series V1.02 Nov.15,2021\nProduct Code : RZ/G2UL\n&gt;\n</code></pre> </li> </ol> <p><code>Flash Writer</code> image file is:</p> <ul> <li><code>FlashWriter-smarc-rzg3s.mot</code></li> </ul> <p>Below is a sample procedure with TeraTerm.</p> <ol> <li> <p>Open a Send file dialog by selecting File &gt; Send file menu.</p> <p></p> <p></p> </li> <li> <p>Select the image to be send and click Open button. The following image is for the RZ/G2L. Please select the Flash Writer image that corresponds to your target device.</p> <p></p> </li> <li> <p>The image will be sent to the board via serial connection.</p> <p></p> </li> <li> <p>After successfully downloading the binary, <code>Flash Writer</code> starts automatically and shows a message like below on the terminal.</p> <pre><code>Flash writer for RZ/G3 Series V1.02 Nov.15,2021\nProduct Code : RZ/G3S\n&gt;\n</code></pre> </li> </ol>"},{"location":"getting_started/#5-write-the-bootloader","title":"5. Write the Bootloader","text":"<p>For the boot operation, two boot loader files need to be programming into the target board.</p> <p>The corresponding bootloader files and specified address information depend on each target board.</p> <p>Before writing the loader files, change the Flash Writer transfer rate from default (<code>115200</code> bps) to high speed (<code>921600</code> bps) with <code>SUP</code> (speed up) command of Flash Writer.</p> <pre><code>&gt;SUP\nScif speed UP\nPlease change to 921.6Kbps baud rate setting of the terminal.\n</code></pre> <p>After issuing the <code>SUP</code> command, change the serial communication protocol speed from <code>115200</code> bps to <code>921600</code> bps as well, and push the enter key.</p> <p>Next, use the <code>XLS2</code> command of Flash Writer to write boot loader binary files.</p> <p>This command receives binary data from the serial port and writes the data to a specified address of the Flash ROM with information where the data should be loaded on the address of the main memory.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>For example, this part describes how to write boot loader files:</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G2 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'11E00\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'00000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_spi-smarc-rzg2l_pmic.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00000000\n SpiFlashMemory End Address  : H'0000BAC8\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>Next, write another loader file by using <code>XLS2</code> command again.</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G2 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'00000\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'20000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg2l_pmic.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00020000\n SpiFlashMemory End Address  : H'000CC73F\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>After writing the two loader files normally, change the serial communication protocol speed from <code>921600</code> bps to <code>115200</code> bps.</p> <p>At last, turn off the power of the board by pressing SW9.</p> <p>Note</p> <ul> <li> <p>Address for sending each loader binary file for QSPI boot</p> File name Address to load to RAM Address to save to ROM <code>bl2_bp_spi-smarc-rzg2l_pmic.srec</code> <code>11E00</code> <code>00000</code> <code>fip-smarc-rzg2l_pmic.srec</code> <code>00000</code> <code>20000</code> </li> </ul> <p>For example, this part describes how to write boot loader files:</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G2 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'11E00\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'00000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_spi-smarc-rzg2lc.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00000000\n SpiFlashMemory End Address  : H'0000BAC8\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>Next, write another loader file by using <code>XLS2</code> command again.</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G2 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'00000\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'20000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg2lc.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00020000\n SpiFlashMemory End Address  : H'000CC73F\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>After writing the two loader files normally, change the serial communication protocol speed from <code>921600</code> bps to <code>115200</code> bps.</p> <p>At last, turn off the power of the board by pressing SW9.</p> <p>Note</p> <ul> <li> <p>Address for sending each loader binary file for QSPI boot</p> File name Address to load to RAM Address to save to ROM <code>bl2_bp_spi-smarc-rzg2lc.srec</code> <code>11E00</code> <code>00000</code> <code>fip-smarc-rzg2lc.srec</code> <code>00000</code> <code>20000</code> </li> </ul> <p>For example, this part describes how to write boot loader files:</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G2 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'11E00\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'00000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_spi-smarc-rzg2ul.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00000000\n SpiFlashMemory End Address  : H'0000BAC8\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>Next, write another loader file by using <code>XLS2</code> command again.</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G2 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'00000\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'20000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg2ul.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00020000\n SpiFlashMemory End Address  : H'000CC73F\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>After writing the two loader files normally, change the serial communication protocol speed from <code>921600</code> bps to <code>115200</code> bps.</p> <p>At last, turn off the power of the board by pressing SW9.</p> <p>Note</p> <ul> <li> <p>Address for sending each loader binary file for QSPI boot</p> File name Address to load to RAM Address to save to ROM <code>bl2_bp_spi-smarc-rzg2ul.srec</code> <code>11E00</code> <code>00000</code> <code>fip-smarc-rzg2ul.srec</code> <code>00000</code> <code>20000</code> </li> </ul> <p>For example, this part describes how to write boot loader files:</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G3 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'A1E00\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'00000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>bl2_bp_spi-smarc-rzg3s.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00000000\n SpiFlashMemory End Address  : H'0001ECC8\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>Next, write another loader file by using <code>XLS2</code> command again.</p> <pre><code>&gt;XLS2\n===== Qspi writing of RZ/G3 Board Command =============\nLoad Program to Spiflash\nWrites to any of SPI address.\n Micron : MT25QU512\nProgram Top Address &amp; Qspi Save Address\n===== Please Input Program Top Address ============\n  Please Input : H'00000\n\n===== Please Input Qspi Save Address ===\n  Please Input : H'60000\nWork RAM(H'50000000-H'53FFFFFF) Clear....\nplease send ! ('.' &amp; CR stop load)\n</code></pre> <p>Send the data of <code>fip-smarc-rzg3s.srec</code> from terminal software after the message please send ! is shown.</p> <p>After successfully downloading the binary, messages like below are shown on the terminal.</p> <pre><code>SPI Data Clear(H'FF) Check :H'00000000-0000FFFF Erasing..Erase Completed\nSAVE SPI-FLASH.......\n======= Qspi  Save Information  =================\n SpiFlashMemory Stat Address : H'00060000\n SpiFlashMemory End Address  : H'0014267E\n===========================================================\n</code></pre> <p>Note</p> <pre><code>SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n</code></pre> <p>In case a message to prompt to clear data like above, please enter Y.</p> <p>After writing the two loader files normally, change the serial communication protocol speed from <code>921600</code> bps to <code>115200</code> bps.</p> <p>At last, turn off the power of the board by pressing SW9.</p> <p>Note</p> <ul> <li> <p>Address for sending each loader binary file for QSPI boot</p> File name Address to load to RAM Address to save to ROM <code>bl2_bp_spi-smarc-rzg3s.srec</code> <code>A1E00</code> <code>00000</code> <code>fip-smarc-rzg3s.srec</code> <code>00000</code> <code>60000</code> </li> </ul>"},{"location":"getting_started/#step-6-run-rz-linux-bsp-plus","title":"Step 6: Run RZ Linux BSP Plus","text":""},{"location":"getting_started/#1-setup-evks-dip-switch-to-normal-boot","title":"1. Setup EVK's DIP switch to Normal Boot","text":"<p>In this case use QSPI boot and SD card.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Set up DIP switch SW1 and SW11 as follows.</p> <ul> <li> <p>SW1</p> <p></p> SW1-1 SW1-2 ON OFF </li> <li> <p>SW11</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF OFF OFF ON </li> </ul> <p>Note</p> <p>For eMMC and/or eSD Boot, please refer to Appendix.</p> <p>Set up DIP switch SW1 and SW11 as follows.</p> <ul> <li> <p>SW1</p> <p></p> SW1-1 SW1-2 SW1-3 SW1-4 SW1-5 SW1-6 ON OFF ON OFF ON ON </li> <li> <p>SW11</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF OFF OFF ON </li> </ul> <p>Note</p> <p>For eMMC and/or eSD Boot, please refer to Appendix.</p> <p>Set up DIP switch SW1 and SW11 as follows.</p> <ul> <li> <p>SW1</p> <p></p> SW1-1 SW1-2 SW1-3 ON OFF ON </li> <li> <p>SW11</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 OFF OFF OFF ON </li> </ul> <p>Note</p> <p>For eMMC and/or eSD Boot, please refer to Appendix.</p> <p>Set up DIP switch SW_CONFIG and SW_MODE as follows.</p> <ul> <li> <p>SW_CONFIG</p> <p></p> SW_CONFIG[1] SW_CONFIG[2] SW_CONFIG[3] SW_CONFIG[4] SW_CONFIG[5] SW_CONFIG[6] OFF OFF ON OFF OFF OFF </li> <li> <p>SW_MODE</p> <p></p> SW_MODE[1] SW_MODE[2] SW_MODE[3] SW_MODE[4] OFF OFF OFF ON </li> </ul> <p>Note</p> <p>For eMMC and/or eSD Boot, please refer to Appendix.</p>"},{"location":"getting_started/#2-turn-on-evk-and-start-linux-bsp-plus","title":"2. Turn on EVK and start Linux BSP Plus","text":"RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <ol> <li>Insert the bootable SD card created at Step 4 into the microSD card slot on SMARC module board as illustrated in the figure at \"1. Setup EVK's peripheral\".</li> <li>Connect a USB cable to the connector for power supply.</li> <li> <p>Press and hold power button for 1 second to turn on the EVK.</p> <p>Note</p> <p>Press and hold the button for 2 seconds when you turn off the EVK.</p> </li> </ol> <ol> <li>Insert the bootable SD card created at Step 4 into the microSD card slot on SMARC module board as illustrated in the figure at \"1. Setup EVK's peripheral\".</li> <li>Connect a USB cable to the connector for power supply.</li> <li> <p>Press and hold power button for 1 second to turn on the EVK.</p> <p>Note</p> <p>Press and hold the button for 2 seconds when you turn off the EVK.</p> </li> </ol> <ol> <li>Insert the bootable SD card created at Step 4 into the microSD card slot on SMARC module board as illustrated in the figure at \"1. Setup EVK's peripheral\".</li> <li>Connect a USB cable to the connector for power supply.</li> <li> <p>Press and hold power button for 1 second to turn on the EVK.</p> <p>Note</p> <p>Press and hold the button for 2 seconds when you turn off the EVK.</p> </li> </ol> <ol> <li>Insert the bootable SD card created at Step 4 into the microSD card slot on SMARC module board as illustrated in the figure at \"1. Setup EVK's peripheral\".</li> <li>Connect a USB cable to the connector for power supply.</li> <li> <p>Press and hold power button for 1 second to turn on the EVK.</p> <p>Note</p> <p>Press and hold the button for 2 seconds when you turn off the EVK.</p> </li> </ol>"},{"location":"history/","title":"News &amp; Updates","text":""},{"location":"history/#news-updates","title":"News &amp; Updates","text":""},{"location":"history/#rz-linux-bsp-plus-for-kernel-612-v20","title":"RZ Linux BSP Plus for Kernel 6.12 v2.0","text":"<p>2025/09/30</p> <p>RZ Linux BSP Plus for Kernel 6.12 v2.0 is available.</p> <p>Target Device : RZ/G2L, RZ/G2LC, RZ/G2UL, RZ/G3S</p> <p>* RZ/G2LC, RZ/G2UL and RZ/G3S are newly supported in this update.</p> <ul> <li>Kernel 6.12</li> <li>Yocto 5.0 (Scarthgap)</li> </ul>"},{"location":"history/#rz-linux-bsp-plus-for-kernel-612-v10","title":"RZ Linux BSP Plus for Kernel 6.12 v1.0","text":"<p>2025/06/30</p> <p>RZ Linux BSP Plus for Kernel 6.12 v1.0 is available.</p> <p>Target Device : RZ/G2L</p> <ul> <li>Kernel 6.12</li> <li>Yocto 5.0 (Scarthgap)</li> </ul> <p>Back to Home &gt;</p>"},{"location":"how_to_build_linux_bsp_plus/","title":"How To Build Linux BSP Plus","text":""},{"location":"how_to_build_linux_bsp_plus/#how-to-build-linux-bsp-plus","title":"How To Build Linux BSP Plus","text":""},{"location":"how_to_build_linux_bsp_plus/#introduction","title":"Introduction","text":"<p>This page explains how to build Linux BSP Plus source code.</p> <p>Requirement</p> <ol> <li> <p>To build Linux BSP Plus (Yocto Linux), the equipment below should be prepared.</p> <p>Equipment</p> <p>Details</p> <p>Linux PC </p> <p>Approximately 110GB free space is necessary.</p> <p>OS </p> <p>Ubuntu 22.04 LTS  64bit OS must be used.</p> </li> </ol>"},{"location":"how_to_build_linux_bsp_plus/#step-1-obtain-renesas-rz-linux-bsp-plus-source-code","title":"Step 1: Obtain Renesas RZ Linux BSP Plus source code","text":"<p>Note</p> <p>Renesas RZ Linux BSP Plus (Yocto Linux) source code is available from GitHub repository.</p> <p>How to get the source code is explained in the next step.</p> <p>Regarding Graphics and Video Codecs packages, please download from Renesas.com website.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p> Get Graphics package</p> <p> Get Video Codecs package</p> <p>Once downloaded, please check the Release Note included inside each package.</p> <p> Get Graphics package</p> <p>* RZ/G2LC does not support Video Codecs package.</p> <p>Once downloaded, please check the Release Note included inside each package.</p> <p>* RZ/G2UL does not support Graphics and Video Codecs packages. Please skip this step.</p> <p>* RZ/G3S does not support Graphics and Video Codecs packages. Please skip this step.</p>"},{"location":"how_to_build_linux_bsp_plus/#step-2-build-renesas-rz-linux-bsp-plus-source-code","title":"Step 2: Build Renesas RZ Linux BSP Plus source code","text":"<p>This step explains how to build Linux environment with Renesas RZ Linux BSP Plus source code.</p> <p>Note</p> <p>In the following instructions, text in angle brackets should be replaced with a character string that depends on your environment.</p> <p>The brackets <code>&lt;</code> and <code>&gt;</code> are unnecessary in the text.</p> <ol> <li> <p>Install the required packages</p> <p>Install some packages into your Linux PC, which are necessary in the following steps.</p> <p></p><pre><code>sudo apt-get update\nsudo apt install build-essential chrpath cpio debianutils diffstat file gawk gcc git iputils-ping libacl1 liblz4-tool locales python3 python3-git python3-jinja2 python3-pexpect python3-pip python3-subunit socat texinfo unzip wget xz-utils zstd bmap-tools\n</code></pre><p></p> </li> <li> <p>Set up your <code>git</code> environment</p> <p>Set up your <code>git</code> environment if you have never done it.</p> <p></p><pre><code>git config --global user.email \"&lt;Your email address&gt;\"\ngit config --global user.name \"&lt;Your user name&gt;\"\n</code></pre><p></p> <p>Note</p> <p>For more information, refer to Yocto Project Quick Build.</p> </li> <li> <p>Set environment variables</p> <p>Set the following environment variables.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p></p><pre><code>export WORK=&lt;A directory path for building&gt;\nexport BOARD=smarc-rzg2l\n</code></pre><p></p> <p></p><pre><code>export WORK=&lt;A directory path for building&gt;\nexport BOARD=smarc-rzg2lc\n</code></pre><p></p> <p></p><pre><code>export WORK=&lt;A directory path for building&gt;\nexport BOARD=smarc-rzg2ul\n</code></pre><p></p> <p></p><pre><code>export WORK=&lt;A directory path for building&gt;\nexport BOARD=smarc-rzg3s\n</code></pre><p></p> </li> <li> <p>Clone Yocto recipe package</p> <p>Create a working directory, and clone Yocto recipe package.</p> <p></p><pre><code>mkdir ${WORK}\ncd ${WORK}\n</code></pre><p></p> <p></p><pre><code>git clone https://git.yoctoproject.org/git/poky\ncd poky\ngit checkout -b tmp ae2d52758fc2fcb0ed996aa234430464ebf4b310\ncd ${WORK}\n</code></pre><p></p> <p></p><pre><code>git clone https://git.yoctoproject.org/meta-arm\ncd meta-arm\ngit checkout -b tmp 8e0f8af90fefb03f08cd2228cde7a89902a6b37c\ncd ${WORK}\n</code></pre><p></p> <p></p><pre><code>git clone https://git.openembedded.org/meta-openembedded\ncd meta-openembedded\ngit checkout -b tmp c29a18fa39ede952f3f6108ec007c1906e2d9a0d\ncd ${WORK}\n</code></pre><p></p> <p></p><pre><code>git clone https://github.com/renesas-rz/meta-renesas\ncd meta-renesas\ngit checkout -b tmp BSP-PLUS-K6.12-V2.0\ncd ${WORK}\n</code></pre><p></p> </li> <li> <p>Enable Graphics and Video Codec</p> <p>The graphics package and the video codec package can be used at the same time, or just one of the packages can be used individually.</p> <p>Note</p> <p>You need to download Graphics and Video Codec packages for this step.</p> <p>See Step 1: Obtain Renesas RZ Linux BSP Plus source code.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p>Graphics package is RTK0EF0045Z14001ZJ-*.zip.</p> <p>Video Codec package is RTK0EF0045Z16002ZJ_*.zip.</p> <ul> <li> <p>Graphics package</p> <p>Note</p> <p>If you want to enable the Graphics on RZ/G2L when building <code>core-image-weston</code>, please copy the Graphics package to working directory and run the commands below.</p> <p>If you build <code>core-image-minimal</code>, please ignore this step.</p> <p>After copying the Graphics package, please extract the package as below.</p> <p></p><pre><code>cd ${WORK}\nunzip ./RTK0EF0045Z14001ZJ-*.zip\ntar zxvf ./RTK0EF0045Z14001ZJ-*/meta-rz-features_graphics_*.tar.gz\n</code></pre><p></p> </li> <li> <p>Video Codec package</p> <p>After copying the Video Codec package, please extract the package as below.</p> <p></p><pre><code>cd ${WORK}\nunzip ./RTK0EF0045Z16002ZJ_*.zip\ntar zxvf ./RTK0EF0045Z16002ZJ_*/meta-rz-features_codec_*.tar.gz\n</code></pre><p></p> </li> </ul> <p>Graphics package is RTK0EF0045Z14001ZJ-*.zip.</p> <ul> <li> <p>Graphics package</p> <p>Note</p> <p>If you want to enable the Graphics on RZ/G2LC when building <code>core-image-weston</code>, please copy the Graphics package to working directory and run the commands below.</p> <p>If you build <code>core-image-minimal</code>, please ignore this step.</p> <p>After copying the Graphics package, please extract the package as below.</p> <p></p><pre><code>cd ${WORK}\nunzip ./RTK0EF0045Z14001ZJ-*.zip\ntar zxvf ./RTK0EF0045Z14001ZJ-*/meta-rz-features_graphics_*.tar.gz\n</code></pre><p></p> </li> </ul> <p>* RZ/G2LC does not support Video Codecs package.</p> <p>* RZ/G2UL does not support Graphics and Video Codecs packages.</p> <p>* RZ/G3S does not support Graphics and Video Codecs packages.</p> </li> <li> <p>Initialize build environment</p> <p>Run an environment setup script as follows.</p> <p></p><pre><code>cd ${WORK}\nTEMPLATECONF=${PWD}/meta-renesas/meta-rz-distro/conf/templates/rz-bsp-plus-conf/ source poky/oe-init-build-env build\n</code></pre><p></p> </li> <li> <p>Add layers</p> <p>Add necessary Yocto <code>meta-layers</code> layer as follows.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <ul> <li> <p>Graphics: Please run the command below if you need the Graphics library.</p> <p></p><pre><code>cd ${WORK}/build\nbitbake-layers add-layer ../meta-rz-features/meta-rz-graphics\n</code></pre><p></p> </li> <li> <p>Video Codec: Please run the command below if you need the video codec library.</p> <p></p><pre><code>cd ${WORK}/build\nbitbake-layers add-layer ../meta-rz-features/meta-rz-codecs\n</code></pre><p></p> </li> </ul> <ul> <li> <p>Graphics: Please run the command below if you need the Graphics library.</p> <p></p><pre><code>cd ${WORK}/build\nbitbake-layers add-layer ../meta-rz-features/meta-rz-graphics\n</code></pre><p></p> </li> </ul> <p>Not Applicable</p> <p>Not Applicable</p> </li> <li> <p>Enable <code>mke2fs</code> (Make Extended Filesystem) command sets</p> <p>If you need to create the filesystem for the block devices on the evaluation board, please add <code>mke2fs</code> command sets to root filesystem by local.conf.</p> <p>Caution</p> <p>If eMMC boot is required, this step is mandatory.</p> Yocto 5.0 (Scarthgap) <p></p><pre><code>cd ${WORK}/build\necho 'IMAGE_INSTALL:append = \" e2fsprogs-mke2fs\"'&gt;&gt; conf/local.conf\n</code></pre><p></p> </li> <li> <p>Build images</p> <p>Run <code>bitbake</code> command to build images.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt;\n</code></pre><p></p> <p>Note</p> <p>Available build options (<code>&lt;image name&gt;</code>) are:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p>Note</p> <p>After building images, you can find them in the following directories.</p> <ul> <li>Images: <code>${WORK}/build/tmp/deploy/images/${BOARD}/</code></li> </ul> <p>Device</p> <p>Category</p> <p>File name</p> <p>RZ/G2L </p> <p>Linux kernel</p> <p><code>Image-smarc-rzg2l.bin</code></p> <p>Device tree file</p> <p><code>r9a07g044l2-smarc.dtb</code></p> <p>Root filesystem</p> <p><code>&lt;image name&gt;-smarc-rzg2l.rootfs.tar.bz2</code></p> <p>Boot loader </p> <ul> <li><code>bl2_bp_esd-smarc-rzg2l_pmic.bin</code> </li> <li><code>bl2_bp_mmc-smarc-rzg2l_pmic.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg2l_pmic.srec</code> </li> <li><code>fip-smarc-rzg2l_pmic.srec</code></li> </ul> <p>Flash Writer</p> <p><code>Flash_Writer_SCIF_RZG2L_SMARC_PMIC_DDR4_2GB_1PCS.mot</code></p> <p>SD image (wic) </p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2l.rootfs.wic.gz</code> </li> <li><code>&lt;image name&gt;-smarc-rzg2l.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>If you need to create an SDK toolchain, run <code>bitbake</code> command as follows.</p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt; -c populate_sdk\n</code></pre><p></p> <p>After building SDK toolchain, you can find them in the following directory. </p><pre><code>${WORK}/build/tmp/deploy/sdk/\n</code></pre><p></p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt;\n</code></pre><p></p> <p>Note</p> <p>Available build options (<code>&lt;image name&gt;</code>) are:</p> <ul> <li><code>core-image-minimal</code></li> <li><code>core-image-weston</code></li> </ul> <p>Note</p> <p>After building images, you can find them in the following directories.</p> <ul> <li>Images: <code>${WORK}/build/tmp/deploy/images/${BOARD}/</code></li> </ul> <p>Device</p> <p>Category</p> <p>File name</p> <p>RZ/G2LC </p> <p>Linux kernel</p> <p><code>Image-smarc-rzg2lc.bin</code></p> <p>Device tree file</p> <p><code>r9a07g044c2-smarc.dtb</code></p> <p>Root filesystem</p> <p><code>&lt;image name&gt;-smarc-rzg2lc.rootfs.tar.bz2</code></p> <p>Boot loader </p> <ul> <li><code>bl2_bp_esd-smarc-rzg2lc.bin</code> </li> <li><code>bl2_bp_mmc-smarc-rzg2lc.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg2lc.srec</code> </li> <li><code>fip-smarc-rzg2lc.srec</code></li> </ul> <p>Flash Writer</p> <p><code>Flash_Writer_SCIF_RZG2LC_SMARC_DDR4_1GB_1PCS.mot</code></p> <p>SD image (wic) </p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2lc.rootfs.wic.gz</code> </li> <li><code>&lt;image name&gt;-smarc-rzg2lc.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>If you need to create an SDK toolchain, run <code>bitbake</code> command as follows.</p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt; -c populate_sdk\n</code></pre><p></p> <p>After building SDK toolchain, you can find them in the following directory. </p><pre><code>${WORK}/build/tmp/deploy/sdk/\n</code></pre><p></p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt;\n</code></pre><p></p> <p>Note</p> <p>Available build options (<code>&lt;image name&gt;</code>) are:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p>Note</p> <p>After building images, you can find them in the following directories.</p> <ul> <li>Images: <code>${WORK}/build/tmp/deploy/images/${BOARD}/</code></li> </ul> <p>Device</p> <p>Category</p> <p>File name</p> <p>RZ/G2UL </p> <p>Linux kernel</p> <p><code>Image-smarc-rzg2ul.bin</code></p> <p>Device tree file</p> <p><code>r9a07g043u11-smarc.dtb</code></p> <p>Root filesystem</p> <p><code>&lt;image name&gt;-smarc-rzg2ul.rootfs.tar.bz2</code></p> <p>Boot loader </p> <ul> <li><code>bl2_bp_esd-smarc-rzg2ul.bin</code> </li> <li><code>bl2_bp_mmc-smarc-rzg2ul.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg2ul.srec</code> </li> <li><code>fip-smarc-rzg2ul.srec</code></li> </ul> <p>Flash Writer</p> <p><code>Flash_Writer_SCIF_RZG2UL_SMARC_DDR4_1GB_1PCS.mot</code></p> <p>SD image (wic) </p> <ul> <li><code>&lt;image name&gt;-smarc-rzg2ul.rootfs.wic.gz</code> </li> <li><code>&lt;image name&gt;-smarc-rzg2ul.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>If you need to create an SDK toolchain, run <code>bitbake</code> command as follows.</p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt; -c populate_sdk\n</code></pre><p></p> <p>After building SDK toolchain, you can find them in the following directory. </p><pre><code>${WORK}/build/tmp/deploy/sdk/\n</code></pre><p></p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt;\n</code></pre><p></p> <p>Note</p> <p>Available build options (<code>&lt;image name&gt;</code>) are:</p> <ul> <li><code>core-image-minimal</code></li> </ul> <p>Note</p> <p>After building images, you can find them in the following directories.</p> <ul> <li>Images: <code>${WORK}/build/tmp/deploy/images/${BOARD}/</code></li> </ul> <p>Device</p> <p>Category</p> <p>File name</p> <p>RZ/G3S </p> <p>Linux kernel</p> <p><code>Image-smarc-rzg3s.bin</code></p> <p>Device tree file</p> <p><code>r9a08g045s33-smarc.dtb</code></p> <p>Root filesystem</p> <p><code>&lt;image name&gt;-smarc-rzg3s.rootfs.tar.bz2</code></p> <p>Boot loader </p> <ul> <li><code>bl2_bp_esd-smarc-rzg3s.bin</code> </li> <li><code>bl2_bp_mmc-smarc-rzg3s.srec</code> </li> <li><code>bl2_bp_spi-smarc-rzg3s.srec</code> </li> <li><code>fip-smarc-rzg3s.srec</code></li> </ul> <p>Flash Writer</p> <p><code>FlashWriter-smarc-rzg3s.mot</code></p> <p>SD image (wic) </p> <ul> <li><code>&lt;image name&gt;-smarc-rzg3s.rootfs.wic.gz</code> </li> <li><code>&lt;image name&gt;-smarc-rzg3s.rootfs.wic.bmap</code></li> </ul> <p>Note</p> <p>If you need to create an SDK toolchain, run <code>bitbake</code> command as follows.</p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake &lt;image name&gt; -c populate_sdk\n</code></pre><p></p> <p>After building SDK toolchain, you can find them in the following directory. </p><pre><code>${WORK}/build/tmp/deploy/sdk/\n</code></pre><p></p> </li> </ol>"},{"location":"how_to_build_linux_bsp_plus/#step-3-additional-feature-packages-optional","title":"Step 3: Additional Feature Packages (optional)","text":"<p>There are some additional feature packages for RZ Linux BSP Plus as follows.</p> <p>Please obtain the necessary files from the following links according to the features you wish to add. For instructions on how to integrate the packages, refer to the documentation included in the downloaded files or, in the case of Git, the README.</p> RZ/G2LRZ/G2LCRZ/G2ULRZ/G3S <ul> <li> <p>Security package</p> <p>This package is to add Security functions such as Secure Boot, Trusted Execution Environment, Hardware Cryptographic IP, Secure Debug and Security Configurator to RZ MPU. Provided functions are different for each device. For more datails, please refer to the documentation included in the package.</p> <p>Renesas' approval is required to obtain the security package. Please apply using the form at the link.</p> <p> Get Security package</p> </li> <li> <p>Multi-OS package</p> <p>This package is the software package consisting of RZ/G Flexible Software Package (FSP) as software package for Renesas MCU with Arm Cortex-M Core and OpenAMP as standardization API of framework for interprocessor communication for developing multi OS solution.</p> <p> Get Multi-OS package</p> </li> </ul> <ul> <li> <p>Security package</p> <p>This package is to add Security functions such as Secure Boot, Trusted Execution Environment, Hardware Cryptographic IP, Secure Debug and Security Configurator to RZ MPU. Provided functions are different for each device. For more datails, please refer to the documentation included in the package.</p> <p>Renesas' approval is required to obtain the security package. Please apply using the form at the link.</p> <p> Get Security package</p> </li> <li> <p>Multi-OS package</p> <p>Multi-OS package for RZ/G2LC is expected to be available in 2025/Nov.</p> </li> </ul> <ul> <li> <p>Security package</p> <p>This package is to add Security functions such as Secure Boot, Trusted Execution Environment, Hardware Cryptographic IP, Secure Debug and Security Configurator to RZ MPU. Provided functions are different for each device. For more datails, please refer to the documentation included in the package.</p> <p>Renesas' approval is required to obtain the security package. Please apply using the form at the link.</p> <p> Get Security package</p> </li> <li> <p>Multi-OS package</p> <p>Multi-OS package for RZ/G2UL is expected to be available in 2025/Nov.</p> </li> </ul> <ul> <li> <p>Security package</p> <p>This package is to add Security functions such as Secure Boot, Trusted Execution Environment, Hardware Cryptographic IP, Secure Debug and Security Configurator to RZ MPU. Provided functions are different for each device. For more datails, please refer to the documentation included in the package.</p> <p>Renesas' approval is required to obtain the security package. Please apply using the form at the link.</p> <p> Get Security package</p> </li> <li> <p>Multi-OS package</p> <p>Multi-OS package for RZ/G3S is expected to be available in 2025/Nov.</p> </li> </ul>"}]}